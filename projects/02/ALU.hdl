// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    And16(a=x , b=false , out=tem_a );
    Mux16(a=x , b=tem_a , sel=zx , out=zx_a );
    Not16(in=zx_a , out=n_a );
    Mux16(a=zx_a , b=n_a , sel=nx , out=nx_a );
    //Implemented zy and ny
    And16(a=y , b=false , out=tem_b );
    Mux16(a=y , b=tem_b , sel=zy , out=zy_b );
    Not16(in=zy_b , out=n_b );
    Mux16(a=zy_b , b=n_b , sel=ny , out=ny_b );
    //Implemented f
    Add16(a =nx_a , b =ny_b , out =f_add );
    And16(a=nx_a , b=ny_b , out=f_and );
    Mux16(a=f_and , b=f_add , sel=f , out=f_f );
    //Implemented no
    Not16(in=f_f , out=no_no );
    Mux16(a=f_f , b=no_no , sel=no , out=out );
    //Implemented zr
    Or8Way(in=out[0..7], out=tmp1);
    Or8Way(in=out[8..15], out=tmp2);
    Or(a=tmp1, b=tmp2, out=tmp3);
    Not(in=tmp3, out=zr);    
    //Implemented ng
    And(a=out[15], b=true, out=ng);
}